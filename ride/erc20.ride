{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let balanceKey = "_b"
let allowanceKey = "_a"
let totalSupply = "totalSupply"

func getBalance(account: String) = {
  let key = account + balanceKey
  match getInteger(this, key) {
    case a:Int => a
    case _ => 0
  }
}

func getAllowance(sender: String, recipient: String) = {
  let key = sender + "_" + recipient + allowanceKey
  match getInteger(this, key) {
    case a:Int => a
    case _ => 0
  }
}

func getTotalSupply() = match getInteger(this, totalSupply) {
  case a:Int => a
  case _ => 0
}

# You need to explicitly check who can mint tokens
@Callable(i)
func mint(account: String, amount: Int) = {
  if (amount <= 0) then throw("Amount must be greater than zero")
  else {
    let currentAmount = getBalance(account)
    let currentTotalSupply = getTotalSupply()
    [
      IntegerEntry(account + balanceKey, currentAmount + amount),
      IntegerEntry(totalSupply, currentTotalSupply + amount)
    ]
  }
}

# You need to explicitly check who can burn tokens
@Callable(i)
func burn(account: String, amount: Int) = {
  if (amount <= 0) then throw("Amount must be greater than zero")
  else {
    let currentAmount = getBalance(account)
    let currentTotalSupply = getTotalSupply()
    if (currentAmount >= amount && currentTotalSupply >= amount) then {
      [
        IntegerEntry(account + balanceKey, currentAmount - amount),
        IntegerEntry(totalSupply, currentTotalSupply - amount)
      ]
    } else throw("Insufficient funds")
  }
}

@Callable(i)
func approve(recipient: String, amount: Int) = {
  let caller = addressFromPublicKey(i.callerPublicKey).toString()
  if (amount <= 0) then throw("Amount must be greater than zero")
  else {
    let currentAmount = getBalance(caller)
    if (currentAmount >= amount)
      then [IntegerEntry(caller + "_" + recipient + allowanceKey, amount)]
      else throw("Insufficient funds")
  }
}

@Callable(i)
func transfer(recipient: String, amount: Int) = {
  let sender = addressFromPublicKey(i.callerPublicKey).toString()
  if (amount <= 0) then throw("Amount must be greater than zero")
  else {
    let currentAmountSender = getBalance(sender)
    let currentAmountRecipient = getBalance(recipient)
    if (currentAmountSender >= amount) then {
      [
        IntegerEntry(sender + balanceKey, currentAmountSender - amount),
        IntegerEntry(recipient + balanceKey, currentAmountRecipient + amount)
      ]
    } else throw("Insufficient funds")
  }
}

@Callable(i)
func transferFrom(sender: String, recipient: String, amount: Int) = {
  let currentAllowance = getAllowance(sender, recipient)
  if (currentAllowance >= amount) then {
    if (amount <= 0) then throw("Amount must be greater than zero")
    else {
      let currentAmountSender = getBalance(sender)
      let currentAmountRecipient = getBalance(recipient)
      [
        IntegerEntry(sender + balanceKey, currentAmountSender - amount),
        IntegerEntry(recipient + balanceKey, currentAmountRecipient + amount),
        IntegerEntry(sender + "_" + recipient + allowanceKey, currentAllowance - amount)
      ]
    }
  } else throw("Insufficient funds")
}

@Verifier(tx)
func verify() = {
  match(tx) {
    case _:DataTransaction => false
    case _:SetScriptTransaction => false
    case _ => sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  }
}
